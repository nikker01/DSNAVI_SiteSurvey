package com.andvantech.dsnavi_sitesurvey.position;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

import com.andvantech.dsnavi_sitesurvey.APInfo;
import com.andvantech.dsnavi_sitesurvey.BaseRssiScan;
import com.andvantech.dsnavi_sitesurvey.PointAccessDBHelper;
import com.andvantech.dsnavi_sitesurvey.PointAccessDataVO;
import com.andvantech.dsnavi_sitesurvey.R;
import com.andvantech.dsnavi_sitesurvey.SwitchLang;
import com.andvantech.dsnavi_sitesurvey.proxy.PointAccessProxy;
import com.andvantech.dsnavi_sitesurvey.proxy.SiteSurveyAccessProxy;
import com.andvantech.dsnavi_sitesurvey.proxy.siteSurveyAPIProxy;


import android.app.ActionBar;
import android.app.ActionBar.OnNavigationListener;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.app.AlertDialog.Builder;
import android.content.BroadcastReceiver;
import android.content.ContentValues;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.net.Uri;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;
import android.provider.Settings.Secure;
import android.text.Html;
import android.util.DisplayMetrics;
import android.util.FloatMath;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class position_1F extends Activity implements SensorEventListener{
	private ProgressDialog simpleWaitDialog;
	private String android_id;
	private ProgressDialog pd;
	public String saveImgIndex;
	private int pDwnIndex = 0;
	private String [] strSpinnerContent;
	public ArrayList<String> mMapImageList = new ArrayList<String>();
	private ArrayList<APInfo> mAPList = new ArrayList<APInfo>();
	private String IP;
	private ImageView imageView;
	private ImageView imageViewPoint;
	private ImageView imageViewLine;
	private ImageView imageViewArrow;
	private FrameLayout framelayout;
	private DisplayMetrics dm;
	private Bitmap bitmap,bitmapPoint;
	private Button btnSaveImg,btnAddPoint,btnEditModeSwitch;
	private Button btnStartSiteSurvey,btnLine;
	private TextView txTop ;
	private String currentFloor;
	
	private ArrayList<ImageView> arrayImageviewPoint;
	private ArrayList<Matrix> arrayMatrixPoint;
	
	//private ImageButton zoomInButton;
	//private ImageButton zoomOutButton;
	public ImageViewHelper imageViewHelper;
	private Uri imageUri;
	private float scale; 
	private Bitmap savedBitmap;
	public static final int editMode = 0;// ??????
	public static final int addPointMode = 1;// ??????
	public static final int drawLineMode = 2;
	public static int nextmode = addPointMode ;
	private EditText editText_ip_setting;
	//private DBHelper dbHelper = new DBHelper (this,Environment.getExternalStorageDirectory().getPath()+ "/add_AP/dbAPINFO.db", null, 1);
	static final String TABLE = "apinfo";
	private boolean isLoadActionBar = true;
	PointAccessProxy proxy;
	SiteSurveyAccessProxy SiteSurveyProxy;
	
	//magnetic sensor
	  private SensorManager sensorMgr;
	  private Sensor sensorOrientation;
	  List<Sensor> sensorList;
	  private Handler mHandlerTime = new Handler();
	  public WifiManager wiFiManager;
	  private BroadcastReceiver receiver;
	  public boolean scanning = false;
	  public double rssiMin = 0;
	public double rssiMax = 0;
	  
	  public boolean isMoving;
	  public float[] mGravity;
	  public float mAccel;
	  public float mAccelCurrent = 0.0f;
	  public float mAccelLast;
	  private float currentAzimuth = 0.0f;
	  private boolean isStart = false;
	  
	  private int index_line = 0;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.position1f);
		dm = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(dm);
				
		imageView = (ImageView)findViewById(R.id.imageView);
		imageViewPoint = (ImageView)findViewById(R.id.imageViewPoint);
		imageViewLine = (ImageView)findViewById(R.id.imageViewLine);
		imageViewArrow = (ImageView)findViewById(R.id.imageview_arrow);
		imageViewArrow.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	showGetAzimuthDialog();

            }
        });
		framelayout = (FrameLayout) findViewById(R.id.imageView_root);
		//btnSaveImg = (Button)findViewById(R.id.btnSaveImage);
		//btnSaveImg.setOnClickListener(btnSaveImgListener);
		btnAddPoint = (Button)findViewById(R.id.btnAddPoint);
		btnAddPoint.setOnClickListener(btnSaveImgListener);
		btnEditModeSwitch = (Button)findViewById(R.id.btnEditModeSwitch);
		btnEditModeSwitch.setOnClickListener(btnSaveImgListener);
		btnStartSiteSurvey = (Button) findViewById(R.id.btnStartSiteSurvey);
		btnStartSiteSurvey.setOnClickListener(btnSaveImgListener);
		btnLine = (Button) findViewById(R.id.btnLine);
		btnLine.setOnClickListener(btnSaveImgListener);
		arrayImageviewPoint = new ArrayList<ImageView>(); 
		arrayMatrixPoint = new ArrayList<Matrix>();
		
		ImageViewHelper.initArrayImageView();
		//isLoadActionBar = false;
		//setTitle("Mode-"+"");
		//zoomInButton = (ImageButton)findViewById(R.id.zoomInButton);
		//zoomOutButton = (ImageButton)findViewById(R.id.zoomOutButton);
		//btnGuideToFrontDesk = (Button)findViewById(R.id.btnGuideToFrontDesk);
		//btnGuideToFrontDesk.setOnClickListener(btnGuideListener);
		
		//btnGuideToSpa = (Button)findViewById(R.id.btnGuideToSpa);
		//btnGuideToSpa.setOnClickListener(btnGuideListener);
		initBundle();
		initDB();
		SiteSurveyProxy.dropTable();
		SiteSurveyProxy.createTable();
		apiProgress();
		wiFiManager = (WifiManager) this
				.getSystemService(this.WIFI_SERVICE);
		/*
		try {
			bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), imageUri);
			Log.v("imageURI",imageUri.getPath());
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace(); 
		}
		//bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dreammall_1f);
		bitmapPoint  = BitmapFactory.decodeResource(getResources(), R.drawable.friendpoint);
		imageView.setImageBitmap(bitmap);
		imageViewPoint.setImageBitmap(bitmapPoint);
		initBundle();
		imageViewHelper = new ImageViewHelper(this, dm,imageView,bitmap,imageViewPoint,bitmapPoint,framelayout); 
		
		*/
		//new ImageViewHelper(dm,imageView,bitmapPoint,zoomInButton,zoomOutButton); 
		//openDatabase();
		
		//Toast.makeText(this, "please set MAPID first before add point", Toast.LENGTH_LONG).show();
		
		
	}
	
	private void checkBluePinScanCompleted()
	{
		if(!imageViewHelper.allPointScanCompleted())
			this.txTop.setVisibility(View.VISIBLE);
		else
			this.txTop.setVisibility(View.GONE);
	}
	
	private void changeToEditMode()
	{
		//this.setTitle("Edit");

		
		btnAddPoint.setEnabled(false);
		btnAddPoint.setVisibility(View.INVISIBLE);
		btnLine.setEnabled(false);
		btnLine.setVisibility(View.INVISIBLE);
		btnStartSiteSurvey.setEnabled(false);
		btnStartSiteSurvey.setVisibility(View.INVISIBLE);
		ImageViewHelper.imageViewPoint.setVisibility(View.INVISIBLE);
		this.imageViewArrow.setVisibility(View.VISIBLE);
		nextmode = addPointMode;
		ImageViewHelper.operationMode = nextmode;
		btnEditModeSwitch.setText(R.string.operation_mode_addpoint);
		this.checkBluePinScanCompleted();
		this.txTop.setVisibility(View.VISIBLE);
	}
	
	private void changeToAddPointMode()
	{
		//this.setTitle("Add");
		btnAddPoint.setEnabled(true);
		btnAddPoint.setVisibility(View.VISIBLE);
		btnLine.setEnabled(false);
		btnLine.setVisibility(View.INVISIBLE);
		btnStartSiteSurvey.setEnabled(false);
		btnStartSiteSurvey.setVisibility(View.INVISIBLE);
		ImageViewHelper.imageViewPoint.setVisibility(View.VISIBLE);
		this.imageViewArrow.setVisibility(View.GONE);
		nextmode = drawLineMode;
		ImageViewHelper.operationMode = nextmode;
		btnEditModeSwitch.setText(R.string.operation_mode_drawline);
		this.txTop.setVisibility(View.GONE);
	}
	private void changeToDrawLineMode()
	{
		//this.setTitle("Add");
		btnAddPoint.setEnabled(false);
		btnAddPoint.setVisibility(View.INVISIBLE);
		btnLine.setEnabled(true);
		btnLine.setVisibility(View.VISIBLE);
		btnStartSiteSurvey.setEnabled(true);
		btnStartSiteSurvey.setVisibility(View.VISIBLE);
		ImageViewHelper.imageViewPoint.setVisibility(View.VISIBLE);
		this.imageViewArrow.setVisibility(View.GONE);
		nextmode = editMode;
		ImageViewHelper.operationMode = nextmode;
		btnEditModeSwitch.setText(R.string.operation_mode_edit);
		this.txTop.setVisibility(View.GONE);
	}
	
	Button.OnClickListener btnSaveImgListener  = new Button.OnClickListener(){
		@Override  
        public void onClick(View v){
			switch(v.getId()){
				case R.id.btnAddPoint:
					ImageViewHelper.isdrawLineMode = false;
					addNewPointImageView();
					//Toast.makeText(position_1F.this, imageViewHelper.currentMapName, Toast.LENGTH_SHORT).show();
					//addPointToBitmap();
					break;
				case R.id.btnLine:
					Log.v("button mode","line button click");
					if(!ImageViewHelper.isdrawLineMode){
						ImageViewHelper.isdrawLineMode = true;
						btnLine.setText("drag mode");
						//btnLine.setEnabled(false);
					}else{
						//imageViewHelper.matrixPoint.set(imageViewHelper.s);
						//imageViewHelper.imageViewPoint.setImageMatrix(imageViewHelper.matrixPoint);
						ImageViewHelper.isdrawLineMode = false;
						btnLine.setText("draw line mode");
						//btnLine.setEnabled(true);
					}
					break;
				case R.id.btnStartSiteSurvey:
					index_line = 0;
					ImageViewHelper.isdrawLineMode = false;
					btnLine.setText("draw line mode");
					//ImageViewHelper.pointCenter(true,true);
					imageViewHelper.matrixPoint.set(imageViewHelper.firstLinePointMatrix);
					imageViewHelper.imageViewPoint.setImageMatrix(imageViewHelper.matrixPoint);
					//mHandlerTime.postDelayed(timerRun,3000);
					scanning = true;
					startScanning();
					break;
				case R.id.btnEditModeSwitch:
					ImageViewHelper.isdrawLineMode = false;
					btnLine.setText("draw line mode");
					switch (nextmode){
					case editMode:
						ImageViewHelper.isDrawing = false;
						ImageViewHelper.imageViewLine.invalidate();
						ImageViewHelper.imageViewLine.setImageDrawable(null);
						for(int i = 0;i<ImageViewHelper.arrayImageviewLine.size();i++){
							ImageViewHelper.arrayImageviewLine.get(i).invalidate();
							ImageViewHelper.arrayImageviewLine.get(i).setImageDrawable(null);
						}
						ImageViewHelper.arrayImageviewLine.clear();
						ImageViewHelper.arrayPxLine.clear();
						
						Toast.makeText(position_1F.this,getResources().getString(R.string.string_change_to_editmode), Toast.LENGTH_SHORT).show();
						changeToEditMode();
						break;
					case addPointMode:
						ImageViewHelper.isDrawing = false;
						ImageViewHelper.imageViewLine.invalidate();
						ImageViewHelper.imageViewLine.setImageDrawable(null);
						for(int i = 0;i<ImageViewHelper.arrayImageviewLine.size();i++){
							ImageViewHelper.arrayImageviewLine.get(i).invalidate();
							ImageViewHelper.arrayImageviewLine.get(i).setImageDrawable(null);
						}
						ImageViewHelper.arrayImageviewLine.clear();
						ImageViewHelper.arrayPxLine.clear();
						
						Toast.makeText(position_1F.this,getResources().getString(R.string.string_change_to_addpointmode), Toast.LENGTH_SHORT).show();
						changeToAddPointMode();
						break;
					case drawLineMode:
						Toast.makeText(position_1F.this,getResources().getString(R.string.string_change_to_addpointmode), Toast.LENGTH_SHORT).show();
						changeToDrawLineMode();
						break;
					}
					//addPointToBitmap();
					break;
			}  
		}
	};
	@Override
	public void onStart() {
	  super.onStart(); 
	  //...你自己的 onStart() 程式碼寫在這
	  //最後再加入下面這行
	  //EasyTracker.getInstance().activityStart(this);
	}

	@Override
	public void onStop() {
		super.onStop();
		if(!isLoadActionBar)
    	{
    		deletePointByFloor(currentFloor);
    		
    		//setPointInfoByCurrentFloor();
    		setPointInfo(); 
    		//deletePointBySource("server");
    	}
		//setPointInfo();
		/*if (imageViewHelper.receiver != null){
			unregisterReceiver(imageViewHelper.receiver);
		}*/
		//EasyTracker.getInstance().activityStop(this);
		//releaseBitmap();
	}
	@Override
	public void onDestroy() {
		super.onDestroy();
		if(!isLoadActionBar)
    	{
    		deletePointByFloor(currentFloor);
    		//setPointInfoByCurrentFloor();
    		//deletePointBySource("server");
    		setPointInfo();      
    	}
		//setPointInfo();
		//releaseBitmap();
		//unregisterReceiver(receiver);
		mHandlerTime.removeCallbacks(timerRun);
		releaseSensor();
	}
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// setting views by current language
		Locale locale = getResources().getConfiguration().locale;
		// setting views by current language
		if (locale.toString().equals("zh_TW")) {
			getMenuInflater().inflate(R.menu.menu_setting_lan3, menu);
		}else if (locale.toString().equals("zh_CN")) {
			getMenuInflater().inflate(R.menu.menu_setting_lan2, menu);
		} else {
			getMenuInflater().inflate(R.menu.menu_setting_lan1, menu);

		}
		//getMenuInflater().inflate(R.menu.menu_setting_Lan1, menu);
		return true;
	}
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		Intent intent = null;
		Bundle bundle = null;
		switch (item.getItemId()) {
		/*case android.R.id.home:
			toggle();
			return true;
		*/
		case R.id.btn_setting:
			intent = new Intent(position_1F.this, BaseRssiScan.class);
			intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			startActivity(intent);
			finish();
			return true;
		case R.id.btn_lang:
			intent = new Intent(position_1F.this, SwitchLang.class);
			bundle = new Bundle();
            bundle.putInt("sourcePage", 1);
            //將Bundle物件assign給intent
            intent.putExtras(bundle);
			startActivity(intent);
			finish();
			return true;
		case R.id.btn_aboutUs:
			showAboutUsDialog();
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	
	
private void initBundle(){
    Bundle getBundle = getIntent().getExtras();
    if(getBundle!=null){
    	IP = getBundle.getString("serverIP");
    	siteSurveyAPIProxy.apiURL = "http://"+IP+"/api/";

    }
}
private void showAboutUsDialog(){
	Builder MyAlertDialog = new AlertDialog.Builder(this);
	MyAlertDialog.setTitle(getResources().getString(R.string.about_us_dialog_title));
	MyAlertDialog.setMessage(getResources().getString(R.string.about_us_dialog_messgae));
	//MyAlertDialog.setTitle("About Us");
	//MyAlertDialog.setMessage("Power RTLS 1.0\n\nCopyright © 2013 Advantech Co., Ltd. All rights reserved.");
	
	MyAlertDialog.setPositiveButton(getResources().getString(R.string.about_us_dialog_btn),
			new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog,
						int which) {

				
				}
			});
	
	MyAlertDialog.setCancelable(false);
	MyAlertDialog.show();
}


	private void releaseBitmap(){
		//imageViewHelper.mDrawLine.clear();
		bitmap.recycle();
		bitmapPoint.recycle();
		System.gc();
	}
	public Bitmap combineImages(Bitmap bitmap, Bitmap s) { // can add a 3rd parameter 'String loc' if you want to save the new image - left some code to do that at the bottom 
		float[] arrayPointM = new float[9];
		float[] arrayM = new float[9];
		ImageViewHelper.matrixPoint.getValues(arrayPointM);
		ImageViewHelper.matrix.getValues(arrayM);
        
        Log.v("scale point ratial", Float.toString(arrayM[0]/arrayPointM[0]));
		
		Bitmap cs = null; 

		cs = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);
		//cs = Bitmap.createBitmap((int)(bitmap.getWidth()), (int)(bitmap.getHeight()/arrayM[0]), Bitmap.Config.ARGB_8888);

	    Log.v("image width", Integer.toString(bitmap.getWidth()));
	    Log.v("image width", Integer.toString(bitmap.getHeight()));
	    Canvas comboImage = new Canvas(cs); 

	    comboImage.drawBitmap(bitmap, 0f, 0f, null); 
	    Log.v("scale", Float.toString(arrayM[0]));
	    Log.v("point location X", Float.toString(arrayPointM[2]));
	    Log.v("point location Y", Float.toString(arrayPointM[5]));
	    comboImage.drawBitmap(s, imageViewHelper.currentX/scale, imageViewHelper.currentY/scale, null); 

	    // this is an extra bit I added, just incase you want to save the new image somewhere and then return the location 
	    /*String tmpImg = String.valueOf(System.currentTimeMillis()) + ".png"; 

	    OutputStream os = null; 
	    try { 
	      os = new FileOutputStream(loc + tmpImg);  
	      cs.compress(CompressFormat.PNG, 100, os); 
	    } catch(IOException e) { 
	      Log.e("combineImages", "problem combining images", e); 
	    }*/ 

	    return cs; 
	  } 
	
	private void addPointToBitmap(){
		//Log.v("bitmap scale", Float.toString(imageViewHelper.scaleRatial));
		Log.v("image width", Integer.toString(bitmap.getWidth()));
		Log.v("image width", Integer.toString(bitmap.getHeight()));

		float[] arrayPointM = new float[9];
		float[] arrayM = new float[9];
		ImageViewHelper.matrixPoint.getValues(arrayPointM);
		ImageViewHelper.matrix.getValues(arrayM);

		Matrix matrix,matrixPoint;
		matrix = imageViewHelper.matrix;
		matrixPoint = imageViewHelper.matrixPoint;
		Log.v("scale", Float.toString(arrayM[0]));
		matrix.postScale(1/arrayM[0], 1/arrayM[0]);
		matrixPoint.postScale(1/arrayM[0], 1/arrayM[0]);
		scale = arrayM[0];
		//matrixPoint.postTranslate(imageViewHelper.currentX-arrayM[2]/arrayM[0], imageViewHelper.currentY-arrayM[5]/arrayM[0]);


		Bitmap resizebitmapPoint = Bitmap.createBitmap(this.bitmapPoint, 0, 0,
				this.bitmapPoint.getWidth(), this.bitmapPoint.getHeight(), imageViewHelper.matrixPoint, true);
		Bitmap resizedBitmap = Bitmap.createBitmap(bitmap, 0, 0,
		bitmap.getWidth(), bitmap.getHeight(), imageViewHelper.matrix, true); 
		
		savedBitmap = combineImages(resizedBitmap,resizebitmapPoint);
		//bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dreammall_1f);
		
		imageView.setImageBitmap(savedBitmap);
		imageViewHelper = new ImageViewHelper(position_1F.this, dm,imageView,savedBitmap,imageViewPoint,bitmapPoint,imageViewLine,framelayout); 
		}
	
	
	
	private void addNewPointImageView(){
		// Let's create the missing ImageView
		FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(
				            FrameLayout.LayoutParams.FILL_PARENT,
				            FrameLayout.LayoutParams.FILL_PARENT);
		ImageView imageView = new ImageView(this);
		Matrix matrix = new Matrix();
		matrix.reset();
		// Now the layout parameters, these are a little tricky at first
    

		imageView.setScaleType(ImageView.ScaleType.MATRIX);
		imageView.setImageResource(R.drawable.pin_blue);//.point);   
		APInfo info = new APInfo();
		 float[] arrayM2 = new float[9];
		 float[] arrayPointM = new float[9];
		 
		imageViewHelper.matrix.getValues(arrayM2);
		imageViewHelper.matrixPoint.getValues(arrayPointM);
		
		//String pixelX = Float.toString((arrayPointM[2]-arrayM2[2])/ImageViewHelper.PointScaleRatial);
		//String pixelY = Float.toString((arrayPointM[5]-arrayM2[5])/ImageViewHelper.PointScaleRatial);
		float[] pixelXY = this.calNewPointPixel();
		String pixelX = Float.toString(pixelXY[0]);
		String pixelY = Float.toString(pixelXY[1]);
		info.setPointX(pixelX);
		info.setPointY(pixelY);
		info.setFloor(currentFloor);
		info.setSource("app");
		Log.i("addNewPoint X",pixelX);
		Log.i("addNewPoint Y",pixelY);
		ImageViewHelper.arrayImageviewPoint.add(imageView);
		ImageViewHelper.arrayMatrixPoint.add(matrix);
		ImageViewHelper.arrayPointAPInfo.add(info);
		framelayout.addView(ImageViewHelper.arrayImageviewPoint.get(ImageViewHelper.arrayImageviewPoint.size()-1), 1, params);

		float[] arrayM = new float[9];
		ImageViewHelper.matrixPoint.getValues(arrayM);
		
		matrix.setValues(arrayM);
		
		imageView.setImageMatrix(matrix);
		
	}
	
	private float[] calNewPointPixel()
	{
		float[] pointXY = new float[2]; 
		Matrix m = new Matrix();
    	
    	Matrix mPoint = new Matrix();
		
    	
    	m.set(this.imageViewHelper.matrix);
        RectF rect = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
        m.mapRect(rect);
        
        //mPoint.set(imageViewHelper.matrixPoint);
        mPoint.set(this.imageViewHelper.matrixPoint);
		
        RectF rectPoint = new RectF(0, 0, bitmapPoint.getWidth(), bitmapPoint.getHeight());
        mPoint.mapRect(rectPoint);
        
        float height = rect.height();
        float width = rect.width();
        float ratio = width/bitmap.getWidth();
        
        //Log.v("matrix",matrix.toString());
    	//Log.v("matrixPoint",matrixPoint.toString());
        float pointCenterX = (rectPoint.right-rectPoint.left)/2;
        float pointCenterY = (rectPoint.bottom-rectPoint.top)/2;
        
        float pointX = (rectPoint.left-rect.left+pointCenterX)/ratio;
        float pointY = (rectPoint.top-rect.top+pointCenterY)/ratio;
        //Log.i("Ratio ",Float.toString(ratio));
        //Log.i("Select point pixelX ",Float.toString(pointX));
		//Log.i("Select point pixelY ",Float.toString(pointY));
		pointXY[0] = pointX;
		pointXY[1] =  pointY;
		return pointXY;	      
	}
	
	private float[] transPointPixelToTrans(float pixelX,float pixelY)
	{
		float[] transXY = new float[2]; 
		float[] arrayM = new float[9];		
		imageViewHelper.matrix.getValues(arrayM);
		transXY[0] = (arrayM[2]+(pixelX*arrayM[0]));
		transXY[1] = (arrayM[5]+(pixelY*arrayM[4]));
		
		return transXY;	      
	};
	
	private void initImageview(Uri uri){

		try {
			bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), uri);
			Log.v("imageURI",uri.getPath());
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dreammall_1f);
		bitmapPoint  = BitmapFactory.decodeResource(getResources(), R.drawable.pin_red);
		imageView.setImageBitmap(bitmap);
		imageViewPoint.setImageBitmap(bitmapPoint);
		String txString = "<font color='#68D0FE'>";
		txString+=getResources().getString(R.string.string_tips_complete_bluepin);
		txString+="</font><br><font color='#FFFFFF'>";
		txString+=getResources().getString(R.string.string_tips_complete_bluepin_content);
		txString+="</font>";
		//String txString = "<font color='#68D0FE'>Completed the scan</font><br><font color='#FFFFFF'>Please tap the blue pin to start scan!</font>";
		CharSequence charSequence=Html.fromHtml(txString);
		txTop =(TextView) findViewById(R.id.top_textview);
		txTop.setText(charSequence);
		//initBundle();
		
		imageViewHelper = new ImageViewHelper(this, dm,imageView,bitmap,imageViewPoint,bitmapPoint,imageViewLine,framelayout); 
	
		//getPointInfo(currentFloor);
		changeToEditMode();
		
	}
	

	private void initActionBar(){
		/** Create an array adapter to populate dropdownlist */
		initSpinnerContent();
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(getBaseContext(), R.layout.spinner_item, strSpinnerContent);
 
        /** Enabling dropdown list navigation for the action bar */
        getActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
        getActionBar().setDisplayShowTitleEnabled(false);
 
        /** Defining Navigation listener */
        ActionBar.OnNavigationListener navigationListener = new OnNavigationListener() {
 
            @Override
            public boolean onNavigationItemSelected(int itemPosition, long itemId) {
            	File f = new File("/sdcard/Double_Service/" + "Map_Image_"
						+ strSpinnerContent[itemPosition] + ".jpg");
            	if(!isLoadActionBar)
            	{
            		deletePointByFloor(currentFloor);
            		//setPointInfoByCurrentFloor();
            		setPointInfo();            		
            	}
            	else
            	{
            		isLoadActionBar= false;
            		deletePointBySource("server");
            		mAPList = siteSurveyAPIProxy.getAPList();//siteSurveyAPIProxy.mSuggestAPList;//
            		setArrayOfPointInfo(mAPList);
            	}
            	currentFloor = strSpinnerContent[itemPosition];
            	
            	//if(!isLoadActionBar){
            		
            		//changeFloor(currentFloor);
            		//getPointInfo(currentFloor);
            		//isLoadActionBar = true;
            	//}else{
            		//setPointInfo();
            	//}
            		
            	
            	
            	imageViewHelper.currentMapName = strSpinnerContent[itemPosition];
            	Uri uri =  Uri.fromFile(f);
            	if( uri != null )
 	            {
 	            	initImageview(uri);
 	            	getPointInfo(currentFloor);
 	            	initSensor();
 	            }
 	            else
 	            {
 	            	Toast.makeText(position_1F.this, getResources().getString(R.string.string_no_map), Toast.LENGTH_LONG).show();
 	                //setTitle("無效的檔案路徑 !!");
 	            	
 	            }
                return false;
            }
        };
 
        /** Setting dropdown items and item navigation listener for the actionbar */
    
        getActionBar().setListNavigationCallbacks(adapter, navigationListener);
	}
	 private void initSpinnerContent(){
	    	
	    	strSpinnerContent = new String[mMapImageList.size()];
	    	for(int i=0;i<mMapImageList.size();i++){
	    		String strTmp = mMapImageList.get(i).split("###")[0];
	    		strSpinnerContent[i] = strTmp;
	    	}
	    }
		private void apiProgress() {
			// TODO Auto-generated method stub
			pd = ProgressDialog.show(this, "", getResources().getString(R.string.progress_load));
			new Thread() {
				@Override
				public void run() {
					android_id = Secure.getString(getApplication().getContentResolver(),
							Secure.ANDROID_ID);
					siteSurveyAPIProxy.getApList(android_id);
					siteSurveyAPIProxy.getApSuggest(android_id);
					siteSurveyAPIProxy.getMapUrl(android_id);
					handler.sendEmptyMessage(0);
				}

			}.start();
		}
		
		Handler handler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				pd.dismiss();
				getMapList();
				
			}
		};
		
		private ArrayList<APInfo> getAPList()
		{
			return siteSurveyAPIProxy.getAPList();
		}
		
		protected void getMapList() {
			// TODO Auto-generated method stub
			Log.i("Survey Tool", "getMapList");
			mMapImageList = siteSurveyAPIProxy.getMapList();
			
			if(mMapImageList.size()>0)
			{
				File docFolder = new File(Environment.getExternalStorageDirectory(),
						"Double_Service");
				docFolder.mkdirs();
				
				Log.i("Survey Tool", "getMapPicData");
				String downloadUrl = mMapImageList.get(0);
				new ImageDownloader().execute(downloadUrl);
			}
			
		}
		public void picDownloadCheck() {
			// TODO Auto-generated method stub
			Log.i("Survey Tool", "picDownloadCheck BEGIN ");
			String downloadUrl = null;

			pDwnIndex = pDwnIndex + 1;
			if (pDwnIndex < mMapImageList.size()) {
				Log.i("Survey tool", "new ImgDownload");

				downloadUrl = mMapImageList.get(pDwnIndex);
				new ImageDownloader().execute(downloadUrl);
			} 
			initActionBar();
			
			

		}
		private class ImageDownloader extends AsyncTask<String, Void, Bitmap> {

			@Override
			protected Bitmap doInBackground(String... param) {
				// TODO Auto-generated method stub
				return downloadBitmap(param[0]);
			}

			@Override
			protected void onPreExecute() {
				Log.i("ImageDownloader", "onPreExecute BEGIN");
				simpleWaitDialog = ProgressDialog.show(position_1F.this, "",
						getResources().getString(R.string.progress_load));

			}

			@Override
			protected void onPostExecute(Bitmap result) {
				Log.i("ImageDownloader", "onPostExecute BEGIN saveImgIndex = "
						+ saveImgIndex);
				// downloadedImg.setImageBitmap(result);

				if (result != null)
					saveMyBitmap(result);

				simpleWaitDialog.dismiss();

				// if()
				picDownloadCheck();
				

			}

			private void saveMyBitmap(Bitmap result) {
				// TODO Auto-generated method stub

				File f = new File("/sdcard/Double_Service/" + "Map_Image_"
						+ saveImgIndex + ".jpg");
				try {
					f.createNewFile();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					Log.i("Error", "Error in saving bitmap");

				}
				FileOutputStream fOut = null;
				try {
					fOut = new FileOutputStream(f);
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
				result.compress(Bitmap.CompressFormat.JPEG, 100, fOut);
				try {
					fOut.flush();
				} catch (IOException e) {
					e.printStackTrace();
				}
				try {
					fOut.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			private Bitmap downloadBitmap(String urlID) {
				// initilize the default HTTP client object

				String[] tmpUrl = urlID.split("###");
				String url = tmpUrl[1];
				saveImgIndex = tmpUrl[0];

				Log.i("downloadBitmap", "downloadBitmap url = " + url);
				Log.i("downloadBitmap", "downloadBitmap saveImgIndex = "
						+ saveImgIndex);

				HttpParams httpParameters = new BasicHttpParams();
				HttpConnectionParams.setConnectionTimeout(httpParameters, 5000);
				HttpConnectionParams.setSoTimeout(httpParameters, 5000);
				
				final DefaultHttpClient client = new DefaultHttpClient(httpParameters);

				// forming a HttoGet request
				final HttpGet getRequest = new HttpGet(url);
				try {

					HttpResponse response = client.execute(getRequest);

					// check 200 OK for success
					final int statusCode = response.getStatusLine().getStatusCode();

					if (statusCode != HttpStatus.SC_OK) {
						Log.i("ImageDownloader", "Error " + statusCode
								+ " while retrieving bitmap from " + url);
						return null;

					}

					final HttpEntity entity = response.getEntity();
					if (entity != null) {
						InputStream inputStream = null;
						try {
							// getting contents from the stream
							inputStream = entity.getContent();

							// decoding stream data back into image Bitmap that
							// android understands
							final Bitmap bitmap = BitmapFactory
									.decodeStream(inputStream);

							return bitmap;
						} finally {
							if (inputStream != null) {
								inputStream.close();
							}
							entity.consumeContent();
						}
					}
				} catch (Exception e) {
					// You Could provide a more explicit error message for
					// IOException
					getRequest.abort();
					Log.i("ImageDownloader",
							"Something went wrong while retrieving bitmap from "
									+ url + e.toString());
				}

				return null;
			}
		}
		/*
		private void showIPsettinDialog(){
			LayoutInflater inflater = LayoutInflater.from(this);
			final View view = inflater
					.inflate(R.layout.dialog_ip_setting, null);
			editText_ip_setting = (EditText) view.findViewById(R.id.editText_IP);
			//show alert view
			Builder builder = new AlertDialog.Builder(this);
			builder.setTitle("IP Setting");
			builder.setView(view);
			builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					String IP = editText_ip_setting.getText().toString();
					Log.v("server IP", IP);
					siteSurveyAPIProxy.apiURL = "http://"+IP+"/api/";
					apiProgress();
				}
			});
			AlertDialog dialog = builder.create();
			dialog.show();
		}
		*/
		private void deletePointByFloor(String floor)
		{
			this.proxy.deletePointByFloor(floor);
		}
		
		
		private void deletePointBySource(String source)
		{
			this.proxy.deletePointBySource(source);
		}
		
		
		void getPointInfo(String floor){
			
			//GlobalDataVO.TABLE_NAME = floor;
			proxy.getPointData(floor);
			int pointCount = proxy.getPointsCount();
			String [] pointSSID = new String [pointCount];
			String [] pointBSSID = new String [pointCount];
			String [] pointOtherSSID = new String [pointCount];
			String [] pointOtherBSSID = new String [pointCount];
			String [] pointPosX = new String [pointCount];
			String [] pointPosY = new String [pointCount];
			String [] pointColor = new String [pointCount];
			String [] pointFloor = new String [pointCount];
			String [] pointSource = new String [pointCount];
			pointSSID = proxy.getPointsSSID();
			pointBSSID = proxy.getPointsBSSID();
			pointOtherSSID = proxy.getPointsOtherSSID();
			pointOtherBSSID = proxy.getPointsOtherBSSID();
			pointPosX = proxy.getPointsPosX();
			pointPosY = proxy.getPointsPosY();
			pointColor = proxy.getPointsColor();
			pointFloor = proxy.getPointsFloor();
			pointSource = proxy.getPointsSource();
			for(int i=0;i<pointCount;i++){
				APInfo apinfo = new APInfo();
				apinfo.setSsid(pointSSID[i]);
				apinfo.setBssid(pointBSSID[i]);
				apinfo.setOtherSSID(pointOtherSSID[i]);
				apinfo.setOtherBSSID(pointOtherBSSID[i]);
				apinfo.setPointX(pointPosX[i]);
				apinfo.setPointY(pointPosY[i]);
				apinfo.setColor(pointColor[i]);
				apinfo.setSource(pointSource[i]);
				apinfo.setFloor(pointFloor[i]);
				loadPoint(apinfo);
			}
			
		}
		
		void loadPoint(APInfo apInfo){
			FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(
		            FrameLayout.LayoutParams.FILL_PARENT,
		            FrameLayout.LayoutParams.FILL_PARENT);
			ImageView imageView = new ImageView(this);
			Matrix matrix = new Matrix();
			matrix.reset();
			// Now the layout parameters, these are a little tricky at first


			imageView.setScaleType(ImageView.ScaleType.MATRIX);
			
			if(this.imageViewHelper.pointAPInfoComplete(apInfo))//!apInfo.getSsid().equals(""))//apInfo.getSource().equals("api")&&!(apInfo.getSsid().equals("")))//apInfo.getAction().equals("add"))
				imageView.setImageResource(R.drawable.pin_green);
			else
				imageView.setImageResource(R.drawable.pin_blue);//.point);   
			//matrix.set(ImageViewHelper.matrixPoint);
			//imageView.setImageMatrix(matrix);
			// Let's get the root layout and add our ImageView
			//imageView.setImageMatrix(ImageViewHelper.matrixPoint);
			ImageViewHelper.arrayImageviewPoint.add(imageView);
			ImageViewHelper.arrayMatrixPoint.add(matrix);
			ImageViewHelper.arrayPointAPInfo.add(apInfo);
			
			float[] arrayM = new float[9];
			
			Matrix m = new Matrix();
	    	
	    	Matrix mPoint = new Matrix();
			
	    	
	    	m.set(this.imageViewHelper.matrix);
	        RectF rect = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
	        m.mapRect(rect);
	        
	        //mPoint.set(imageViewHelper.matrixPoint);
	        mPoint.set(this.imageViewHelper.matrixPoint);
			
	        RectF rectPoint = new RectF(0, 0, bitmapPoint.getWidth(), bitmapPoint.getHeight());
	        mPoint.mapRect(rectPoint);
	        
	        float height = rect.height();
	        float width = rect.width();
	        float ratio = width/bitmap.getWidth();
	        
	        //Log.v("matrix",matrix.toString());
	    	//Log.v("matrixPoint",matrixPoint.toString());
	        float pointCenterX = (rectPoint.right-rectPoint.left)/2;
	        float pointCenterY = (rectPoint.bottom-rectPoint.top)/2;
			
			
			imageViewHelper.matrix.getValues(arrayM);
			float[] arrayPointM = new float[9];
			ImageViewHelper.matrixPoint.getValues(arrayPointM);
			float[] pointXYTrans = this.transPointPixelToTrans(Float.valueOf(apInfo.getPointX()),Float.valueOf(apInfo.getPointY()));
			/*arrayPointM[2] = Float.valueOf(apInfo.getPointX());
			arrayPointM[5] = Float.valueOf(apInfo.getPointY());*/
			arrayPointM[2] = Float.valueOf(pointXYTrans[0]-pointCenterX);
			arrayPointM[5] = Float.valueOf(pointXYTrans[1]-pointCenterY);
			matrix.setValues(arrayPointM);
			//matrix.postTranslate(Float.valueOf(apInfo.getPointX())+arrayM[2],Float.valueOf(apInfo.getPointY())+arrayM[5]);
			//
			imageView.setImageMatrix(matrix);
			framelayout.addView(ImageViewHelper.arrayImageviewPoint.get(ImageViewHelper.arrayImageviewPoint.size()-1), 1, params);

		}
		
		void setArrayOfPointInfo(ArrayList<APInfo> apInfoList){
			//initDB(currentFloor);
			//proxy.dropTable();
			for(int i=0;i<apInfoList.size();i++){
				String [] data = new String[9];
				APInfo apinfo = apInfoList.get(i);
				data[0] = apinfo.getSsid();
				data[1] = apinfo.getBssid();
				data[2] = apinfo.getOtherSSID();
				data[3] = apinfo.getOtherBSSID();
				data[4] = apinfo.getPointX();
				data[5] = apinfo.getPointY();
				data[6] = apinfo.getColor();
				data[7] = apinfo.getFloor();
				data[8] = apinfo.getSource();
				proxy.pointDataCreate(data);
			}
		}
		
		void setPointInfoByCurrentFloor()
		{
			for(APInfo apinfo:ImageViewHelper.arrayPointAPInfo)
			{		
				if(apinfo.getFloor().equals(currentFloor))
				{
					String [] data = new String[9];
					data[0] = apinfo.getSsid();
					data[1] = apinfo.getBssid();
					data[2] = apinfo.getOtherSSID();
					data[3] = apinfo.getOtherBSSID();
					data[4] = apinfo.getPointX();
					data[5] = apinfo.getPointY();
					data[6] = apinfo.getColor();
					data[7] = apinfo.getFloor();
					data[8] = apinfo.getSource();
					proxy.pointDataCreate(data);
				}
			}
		}
		
		void setPointInfo(){
			//initDB(currentFloor);
			//proxy.dropTable();
			for(APInfo apinfo:ImageViewHelper.arrayPointAPInfo)
			{		
				String [] data = new String[9];
				data[0] = apinfo.getSsid();
				data[1] = apinfo.getBssid();
				data[2] = apinfo.getOtherSSID();
				data[3] = apinfo.getOtherBSSID();
				data[4] = apinfo.getPointX();
				data[5] = apinfo.getPointY();
				data[6] = apinfo.getColor();
				data[7] = apinfo.getFloor();
				data[8] = apinfo.getSource();
				proxy.pointDataCreate(data);
			}
		}
			void setSiteSurveyInfo(ArrayList<String> MACList, ArrayList<Integer> RSSIList,float pointX,float pointY){
				//SiteSurveyProxy.dropTable();
					String [] data = new String[9];
					String MAC = "";
					String RSSI = "";
					String strPointX = Float.toString(pointX);
					String strPointY = Float.toString(pointY);
					for(int i=0;i<MACList.size();i++){
						if(i==0)
							MAC+=MACList.get(i);
						else
							MAC+=(","+MACList.get(i));
					}
					for(int i=0;i<RSSIList.size();i++){
						if(i==0)
							RSSI+=RSSIList.get(i);
						else
							RSSI+=(","+RSSIList.get(i));
					}
					data[0] = MAC;
					data[1] = RSSI;
					data[2] = strPointX;
					data[3] = strPointY;
					data[4] = currentFloor;
					
					SiteSurveyProxy.sitesurveyDataCreate(data);
				
			/*
			for(int i=0;i<ImageViewHelper.arrayPointAPInfo.size();i++){
				String [] data = new String[9];
				APInfo apinfo = ImageViewHelper.arrayPointAPInfo.get(i);
				data[0] = apinfo.getSsid();
				data[1] = apinfo.getBssid();
				data[2] = apinfo.getOtherSSID();
				data[3] = apinfo.getOtherBSSID();
				data[4] = apinfo.getPointX();
				data[5] = apinfo.getPointY();
				data[6] = apinfo.getColor();
				data[7] = this.currentFloor;
				data[8] = apinfo.getSource();
				proxy.pointDataCreate(data);
			}*/
		}
		
		
		void initDB(){
			
			//GlobalDataVO.TABLE_NAME = floor;
			proxy = new PointAccessProxy(this);
			proxy.initDB();
			
			SiteSurveyProxy = new SiteSurveyAccessProxy(this);
			SiteSurveyProxy.initDB();
				
		}
		public void initSensor(){
			sensorMgr = (SensorManager) this.getSystemService(this.SENSOR_SERVICE);
			sensorMgr.registerListener(this, sensorMgr.getDefaultSensor(Sensor.TYPE_ORIENTATION),
	                SensorManager.SENSOR_DELAY_NORMAL);
			sensorMgr.registerListener(this, sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
	                SensorManager.SENSOR_DELAY_NORMAL);
			String strSensor  = "Name: " + sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER).getName()
			        + "\nVersion: " + String.valueOf(sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER).getVersion())
			        + "\nVendor: " + sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER).getVendor()
			        + "\nType: " + String.valueOf(sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER).getType())
			        + "\nMax: " + String.valueOf(sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER).getMaximumRange())
			        + "\nResolution: " + String.valueOf(sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER).getResolution())
			        + "\nPower: " + String.valueOf(sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER).getPower())
			        + "\nClass: " + sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER).getClass().toString();
			Log.v("sensor Info", strSensor);
			mGravity = new float[3];
			mGravity[0] = 0;
			mGravity[1] = 0;
			mGravity[2] = 0;
		}
	  public void releaseSensor(){
		  if(sensorMgr!=null)
			  sensorMgr.unregisterListener(this);
		  isMoving = false;
	  }

		@Override
	    public void onAccuracyChanged(Sensor sensor, int accuracy) {
	    }

	    @Override
	    public void onSensorChanged(SensorEvent event) {
	    	switch (event.sensor.getType()) {
	        case Sensor.TYPE_ORIENTATION:
	        	imageViewHelper.azimuth = 0;
	        	imageViewHelper.azimuth = event.values[0];
	        	OnSensorChangeArrow(imageViewHelper.azimuth);
	        	//Log.v("sensor","目前地磁方向：X - " + event.values[0] + ", Y - "+ event.values[1] + ", Z - " + event.values[2]);
	    	break;
	    	}
          
	        	//Log.v("magnetic sensor", "?��??��??��?�? - " + event.values[0] + ", Y - " + event.values[1] + ", Z - " + event.values[2]);
	    }
		  private void OnSensorChangeArrow(float azimuth){
				Matrix matrix = new Matrix();
				matrix.reset();
				matrix.postRotate(-1*azimuth, 50, 50);
				imageViewArrow.setImageMatrix(matrix);
			
			}
		  
		  private void showGetAzimuthDialog(){
			  Builder MyAlertDialog = new AlertDialog.Builder(this);
				MyAlertDialog.setTitle("DSNAVI-SiteSurvey");
				MyAlertDialog.setMessage("請將手機正對地圖前方，並按下ok");
				//MyAlertDialog.setTitle("About Us");
				//MyAlertDialog.setMessage("Power RTLS 1.0\n\nCopyright © 2013 Advantech Co., Ltd. All rights reserved.");
				
				MyAlertDialog.setPositiveButton("OK",
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {
								Log.v("DSNAVI-SiteSurvey","standard azimuth = "+imageViewHelper.azimuth);
								imageViewHelper.standard_azimuth = imageViewHelper.azimuth;
								//add send standard to server
							}
						});
				MyAlertDialog.setNegativeButton("Cancel",
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {
								
							}
						});
				
				MyAlertDialog.setCancelable(false);
				MyAlertDialog.show();
		  }
		  
		  private final Runnable timerRun = new Runnable()
		  {
		    public void run()
		    {
		      mHandlerTime.postDelayed(this,500);
		     
		      float [] linePoint = new float[4]; 
		      //index_line = 0;
		      linePoint = imageViewHelper.arrayPxLine.get(index_line);
		      float lineLength = (float)(Math.sqrt((linePoint[2]-linePoint[0])*(linePoint[2]-linePoint[0])+(linePoint[3]-linePoint[1])*(linePoint[3]-linePoint[1])));
		      float moveX  = 5*(linePoint[2]-linePoint[0])/lineLength;
		      float moveY  = 5*(linePoint[3]-linePoint[1])/lineLength;	    		  
		      imageViewHelper.matrixPoint.postTranslate(moveX, moveY);
		      imageViewHelper.imageViewPoint.setImageMatrix(imageViewHelper.matrixPoint);
		      
		      float [] currentPointXY = imageViewHelper.calNewPointPixel(imageViewHelper.matrixPoint);
		      
		      float movingDist = (float)(Math.sqrt((currentPointXY[0]-linePoint[0])*(currentPointXY[0]-linePoint[0])+(currentPointXY[1]-linePoint[1])*(currentPointXY[1]-linePoint[1])));
		      if(movingDist>lineLength){
		    	  index_line++;
		    	  float [] arrayPointM = new float[9];
		    	  imageViewHelper.matrixPoint.getValues(arrayPointM);
			    	
		    	  
		    	  Matrix mPoint = new Matrix();
					
			    	
			
			        //mPoint.set(imageViewHelper.matrixPoint);
			      mPoint.set(imageViewHelper.matrixPoint);
			      RectF rectPoint = new RectF(0, 0, bitmapPoint.getWidth(), bitmapPoint.getHeight());
			      mPoint.mapRect(rectPoint);
			       //Log.v("matrix",matrix.toString());
			   	//Log.v("matrixPoint",matrixPoint.toString());
			      float pointCenterX = (rectPoint.right-rectPoint.left)/2;
			      float pointCenterY = (rectPoint.bottom-rectPoint.top)/2;
		    	  
		    	  
		    	  arrayPointM[2] = 	transPointPixelToTrans(linePoint[2],linePoint[3])[0]-pointCenterX;	    	  
		    	  arrayPointM[5] = 	transPointPixelToTrans(linePoint[2],linePoint[3])[1]-pointCenterY;
		    	  imageViewHelper.matrixPoint.setValues(arrayPointM);
		      }
		      if(index_line>imageViewHelper.arrayPxLine.size()-1){
		    	  mHandlerTime.removeCallbacks(timerRun);
		    	  unregisterReceiver(receiver);
		    	  receiver = null;
		    	  scanning = false;
		      }
		    }
		  };
		  public void startScanning() {
			  
			  if (receiver == null) {
					receiver = new WifiScanReceiver(this);

					registerReceiver(receiver, new IntentFilter(
							WifiManager.SCAN_RESULTS_AVAILABLE_ACTION));
				} else {
						unregisterReceiver(receiver);

						receiver = new WifiScanReceiver(this);

						registerReceiver(receiver, new IntentFilter(
								WifiManager.SCAN_RESULTS_AVAILABLE_ACTION));
				}
				wiFiManager.startScan();
		  }
		  
		  public void siteSurveyMoving(){
			  float [] linePoint = new float[4]; 
		      //index_line = 0;
			  if(index_line<imageViewHelper.arrayPxLine.size()){
				  linePoint = imageViewHelper.arrayPxLine.get(index_line);
				  float lineLength = (float)(Math.sqrt((linePoint[2]-linePoint[0])*(linePoint[2]-linePoint[0])+(linePoint[3]-linePoint[1])*(linePoint[3]-linePoint[1])));
				  float moveX  = 30*(linePoint[2]-linePoint[0])/lineLength;
				  float moveY  = 30*(linePoint[3]-linePoint[1])/lineLength;	    		  
				  imageViewHelper.matrixPoint.postTranslate(moveX, moveY);
				  imageViewHelper.imageViewPoint.setImageMatrix(imageViewHelper.matrixPoint);
		      
				  float [] currentPointXY = imageViewHelper.calNewPointPixel(imageViewHelper.matrixPoint);
		      
				  float movingDist = (float)(Math.sqrt((currentPointXY[0]-linePoint[0])*(currentPointXY[0]-linePoint[0])+(currentPointXY[1]-linePoint[1])*(currentPointXY[1]-linePoint[1])));
				  if(movingDist>lineLength){
					  index_line++;
					  float [] arrayPointM = new float[9];
					  imageViewHelper.matrixPoint.getValues(arrayPointM);
					  Matrix mPoint = new Matrix();
					  //mPoint.set(imageViewHelper.matrixPoint);
					  mPoint.set(imageViewHelper.matrixPoint);
					  RectF rectPoint = new RectF(0, 0, bitmapPoint.getWidth(), bitmapPoint.getHeight());
					  mPoint.mapRect(rectPoint);
					  //Log.v("matrix",matrix.toString());
					  //Log.v("matrixPoint",matrixPoint.toString());
					  float pointCenterX = (rectPoint.right-rectPoint.left)/2;
					  float pointCenterY = (rectPoint.bottom-rectPoint.top)/2;
		    	  
		    	  
					  arrayPointM[2] = 	transPointPixelToTrans(linePoint[2],linePoint[3])[0]-pointCenterX;	    	  
					  arrayPointM[5] = 	transPointPixelToTrans(linePoint[2],linePoint[3])[1]-pointCenterY;
					  imageViewHelper.matrixPoint.setValues(arrayPointM);
				  }
				  startScanning();
			  }
			  if(index_line>=imageViewHelper.arrayPxLine.size()){
		    	  //mHandlerTime.removeCallbacks(timerRun);
		    	  unregisterReceiver(receiver);
		    	  receiver = null;
		    	  scanning = false;
		      }
		  }
}

